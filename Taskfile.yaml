---

# https://taskfile.dev

version: '3'

dotenv: ['{{ if .REPO }}.env_{{ .REPO }}{{ else }}.env{{ end }}']

tasks:

  default:
    silent: true
    cmds:
      - task --list

  test_repo_does_not_exist:
    internal: true
    preconditions:
      - sh: '[ "{{.RESTIC_REPOSITORY}}" != "<no value>" ]'
        msg: 'Variable "RESTIC_REPOSITORY" is not set'
      - sh: 'restic cat config && exit 1 || exit 0'
        msg: 'Restic repository is already initialized'

  test_repo_exists:
    internal: true
    preconditions:
      - sh: '[ "{{.RESTIC_REPOSITORY}}" != "<no value>" ]'
        msg: 'Variable "RESTIC_REPOSITORY" is not set'
      - sh: 'restic cat config'
        msg: 'Restic repository does not exist'

  init:
    deps: [test_repo_does_not_exist]
    desc: Initialize restic repository
    cmds:
      - restic init

  snapshots:
    deps: [test_repo_exists]
    desc: List all available snapshots
    cmds:
      - restic snapshots

  list:
    deps: [test_repo_exists]
    desc: List files in latest snapshot
    cmds:
      - restic ls {{ with .CLI_ARGS }}{{ . }}{{ else }}latest{{ end }}

  restore:
    deps: [test_repo_exists]
    desc: Restore files from snapshot
    cmds:
      - restic restore {{ with .CLI_ARGS }}{{ . }}{{ else }}latest{{ end }} --target ./restore/

  status:
    deps: [test_repo_exists]
    desc: Print statitics about the repository
    cmds:
      - restic stats

  check:
    deps: [test_repo_exists]
    desc: Check the restic repository
    cmds:
      - restic check

  unlock:
    deps: [test_repo_exists]
    desc: Unlock the restic repository
    cmds:
      - restic unlock

  cleanup:
    deps: [test_repo_exists]
    desc: Clean up restic cache
    cmds:
      - restic cache --cleanup

...
