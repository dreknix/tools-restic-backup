---

# https://taskfile.dev

version: "3"

dotenv: ["{{ if .REPO }}.env_{{ .REPO }}{{ else }}.env{{ end }}"]

tasks:

  default:
    silent: true
    cmds:
      - task --list

  test_repo_does_not_exist:
    internal: true
    preconditions:
      - sh: '[ "{{.RESTIC_REPOSITORY}}" != "<no value>" ]'
        msg: "Variable 'RESTIC_REPOSITORY' is not set"
      - sh: '{{ .RESTIC }} cat config && exit 1 || exit 0'
        msg: "Restic repository is already initialized"

  test_repo_exists:
    internal: true
    preconditions:
      - sh: '[ "{{.RESTIC_REPOSITORY}}" != "<no value>" ]'
        msg: "Variable 'RESTIC_REPOSITORY' is not set"
      - sh: '{{ .RESTIC }} cat config'
        msg: "Restic repository does not exist"

  init:
    deps: [test_repo_does_not_exist]
    desc: Initialize restic repository
    cmds:
      - "{{ .RESTIC }} init"

  snapshots:
    deps: [test_repo_exists]
    desc: List all available snapshots
    cmds:
      - "{{ .RESTIC }} snapshots"

  list:
    deps: [test_repo_exists]
    desc: List files in latest snapshot
    cmds:
      - "{{ .RESTIC }} ls {{ with .CLI_ARGS }}{{ . }}{{ else }}latest{{ end }}"

  restore:
    deps: [test_repo_exists]
    desc: Restore files from snapshot
    cmds:
      - "{{ .RESTIC }} restore {{ with .CLI_ARGS }}{{ . }}{{ else }}latest{{ end }} --target ./restore/"

  status:
    deps: [test_repo_exists]
    desc: Print statitics about the repository
    cmds:
      - "{{ .RESTIC }} stats"

  check:
    deps: [test_repo_exists]
    desc: Check the restic repository
    cmds:
      - "{{ .RESTIC }} check"

  unlock:
    deps: [test_repo_exists]
    desc: Unlock the restic repository
    cmds:
      - "{{ .RESTIC }} unlock"

  cleanup:
    deps: [test_repo_exists]
    desc: Clean up restic cache
    cmds:
      - "{{ .RESTIC }} cache --cleanup"

...
